<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\keil_output\SWAuthDemo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\keil_output\SWAuthDemo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Aug 28 22:35:19 2018
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; setupGPRS &rArr; Air202_checkIPAddress &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[bd]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
 <LI><a href="#[c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SVC_Handler</a><BR>
 <LI><a href="#[d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DebugMon_Handler</a><BR>
 <LI><a href="#[e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">Reserved_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">Reserved_IRQHandler</a><BR>
 <LI><a href="#[1c]">ADCA_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADCA_IRQHandler</a><BR>
 <LI><a href="#[41]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADCA_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[11]">ADCB_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1e]">BOD_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[13]">I2C_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[9]">MemManage_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[23]">PIOINT0_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[22]">PIOINT1_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[21]">PIOINT2_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[20]">PIOINT3_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1f]">Reserved_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[12]">SSP1_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from swauthdemo.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from sysinit.o(.text) referenced from keil_startup_lpc112x.o(.text)
 <LI><a href="#[14]">TIMER16_0_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[15]">TIMER16_1_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[16]">TIMER32_0_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[17]">TIMER32_1_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1a]">UART1_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1b]">UART2_IRQHandler</a> from swauthdemo.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[19]">UART_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[10]">WAKEUP_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced 13 times from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[1d]">WDT_IRQHandler</a> from keil_startup_lpc112x.o(.text) referenced from keil_startup_lpc112x.o(RESET)
 <LI><a href="#[2a]">__main</a> from __main.o(!!!main) referenced from keil_startup_lpc112x.o(.text)
 <LI><a href="#[29]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[27]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[26]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[28]">fputc</a> from board.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[a8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[30]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[32]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[3a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[34]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[c6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[36]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[ca]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[df]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[37]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; setupGPRS &rArr; Air202_checkIPAddress &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[bf]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authorization
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Reserved_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADCA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADCB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PIOINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PIOINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PIOINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PIOINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER32_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER32_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, keil_startup_lpc112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInit &rArr; Board_SystemInit &rArr; Board_SetupMuxing &rArr; Chip_IOCON_SetPinMuxing
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>update_crc16_reflected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_crc16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_crc16_A001
</UL>

<P><STRONG><a name="[43]"></a>update_crc16_A001</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_crc16.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_crc16_reflected
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_crc16_Modbus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_crc16
</UL>

<P><STRONG><a name="[45]"></a>calculate_crc16</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lib_crc16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calculate_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_crc16_A001
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUID
</UL>

<P><STRONG><a name="[46]"></a>calculate_crc16_Modbus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lib_crc16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_crc16_A001
</UL>

<P><STRONG><a name="[47]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chip_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>Chip_IOCON_SetPinMuxing</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, iocon_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_IOCON_SetPinMuxing
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupMuxing
</UL>

<P><STRONG><a name="[e5]"></a>Chip_SYSCON_SetDeepSleepPD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, syscon_112x.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>Chip_SYSCON_SetWakeup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, syscon_112x.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>Chip_SYSCON_PowerDown</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, syscon_112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[7d]"></a>Chip_SYSCON_PowerUp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, syscon_112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[e7]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[ea]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ed]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>setupGPRS</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = setupGPRS &rArr; Air202_checkIPAddress &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_setEcho
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_setAPN
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_powerOn
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkSignal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkPIN
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkIPAddress
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkAttach
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_activePDP
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPShut
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>authorization</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, swauthdemo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPStart
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPSend
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART2_IRQHandler &rArr; Chip_UART_IRQRBHandler &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuffer_Pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>userApp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = userApp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>getUID</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getUID &rArr; calculate_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>AT_Send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AT_Send &rArr; Chip_UART_SendRB &rArr; RingBuffer_InsertMult &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>

<P><STRONG><a name="[61]"></a>AT_Read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AT_Read &rArr; Chip_UART_ReadRB &rArr; RingBuffer_PopMult &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_ReadRB
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>

<P><STRONG><a name="[63]"></a>GPIO_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>setGPRSCtlPinStatu</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setGPRSCtlPinStatu
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_powerOn
</UL>

<P><STRONG><a name="[66]"></a>test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, swauthdemo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; setupGPRS &rArr; Air202_checkIPAddress &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPStart
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPSend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUID
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userApp
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUART
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4b]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, air202.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_powerOn
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[70]"></a>Air202_ATInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Air202_ATInit &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_powerOn
</UL>

<P><STRONG><a name="[4e]"></a>Air202_checkSignal</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Air202_checkSignal &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[4d]"></a>Air202_checkPIN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Air202_checkPIN &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[72]"></a>Air202_getIPStatus</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, air202.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>

<P><STRONG><a name="[51]"></a>Air202_setAPN</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Air202_setAPN &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[4c]"></a>Air202_setEcho</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Air202_setEcho &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[57]"></a>Air202_IPStart</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Air202_IPStart &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authorization
</UL>

<P><STRONG><a name="[74]"></a>Air202_IPClose</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, air202.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>

<P><STRONG><a name="[75]"></a>Air202_CheckRegStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, air202.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[4f]"></a>Air202_checkAttach</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Air202_checkAttach &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[52]"></a>Air202_activePDP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Air202_activePDP &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[53]"></a>Air202_checkIPAddress</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Air202_checkIPAddress &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[76]"></a>Air202_checkSendLimitSize</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, air202.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[59]"></a>Air202_IPSend</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Air202_IPSend &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authorization
</UL>

<P><STRONG><a name="[50]"></a>Air202_IPShut</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Air202_IPShut &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[4a]"></a>Air202_powerOn</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Air202_powerOn &rArr; Air202_ATInit &rArr; sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_ATInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGPRSCtlPinStatu
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[77]"></a>Air202_powerOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, air202.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>

<P><STRONG><a name="[7e]"></a>Chip_Clock_SetSystemPLLSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[ee]"></a>Chip_Clock_SetPLLBypass</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clock_112x.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>Chip_Clock_SetMainClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[ef]"></a>Chip_Clock_SetWDTClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_112x.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>Chip_Clock_SetCLKOUTSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_112x.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>Chip_Clock_GetWDTOSCRate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, clock_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[7a]"></a>Chip_Clock_GetSystemPLLInClockRate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clock_112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
</UL>

<P><STRONG><a name="[79]"></a>Chip_Clock_GetSystemPLLOutClockRate</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, clock_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Chip_Clock_GetSystemPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLInClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[7b]"></a>Chip_Clock_GetMainClockRate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, clock_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLInClockRate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[48]"></a>Chip_Clock_GetSystemClockRate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clock_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[9d]"></a>Chip_GPIO_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio_112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[f1]"></a>Chip_GPIO_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio_112x.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>Chip_GPIO_WriteDirBit</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, gpio_112x.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>Chip_GPIO_SetDir</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio_112x.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>Chip_GPIO_SetPinDIR</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio_112x.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>Chip_GPIO_SetPortDIR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio_112x.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>Chip_GPIO_SetupPinInt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gpio_112x.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>Chip_SetupXtalClocking</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sysinit_112x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupSystemPLL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_FMC_SetFLASHAccess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetMainClockSource
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetSystemPLLSource
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCON_PowerUp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCON_PowerDown
</UL>

<P><STRONG><a name="[83]"></a>Chip_SetupIrcClocking</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, sysinit_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_SetupIrcClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetupSystemPLL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_FMC_SetFLASHAccess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetMainClockSource
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetSystemPLLSource
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCON_PowerUp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCON_PowerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SystemInit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupClocking
</UL>

<P><STRONG><a name="[84]"></a>Chip_SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysinit_112x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[6b]"></a>Chip_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUART
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[f7]"></a>Chip_UART_DeInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart_112x.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>Chip_UART_Send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendBlocking
</UL>

<P><STRONG><a name="[86]"></a>Chip_UART_SendBlocking</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, uart_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutChar
</UL>

<P><STRONG><a name="[89]"></a>Chip_UART_Read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_112x.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_ReadBlocking
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTGetChar
</UL>

<P><STRONG><a name="[88]"></a>Chip_UART_ReadBlocking</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, uart_112x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Read
</UL>

<P><STRONG><a name="[6c]"></a>Chip_UART_SetBaud</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUART
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[8a]"></a>Chip_UART_RXIntHandlerRB</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chip_UART_RXIntHandlerRB &rArr; RingBuffer_Insert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>

<P><STRONG><a name="[8c]"></a>Chip_UART_TXIntHandlerRB</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uart_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chip_UART_TXIntHandlerRB &rArr; RingBuffer_Pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_IRQRBHandler
</UL>

<P><STRONG><a name="[60]"></a>Chip_UART_SendRB</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, uart_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Chip_UART_SendRB &rArr; RingBuffer_InsertMult &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>

<P><STRONG><a name="[62]"></a>Chip_UART_ReadRB</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_UART_ReadRB &rArr; RingBuffer_PopMult &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_PopMult
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Read
</UL>

<P><STRONG><a name="[5b]"></a>Chip_UART_IRQRBHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart_112x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_UART_IRQRBHandler &rArr; Chip_UART_TXIntHandlerRB &rArr; RingBuffer_Pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_RXIntHandlerRB
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>Chip_UART_SetBaudFDR</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, uart_112x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>

<P><STRONG><a name="[6a]"></a>RingBuffer_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ring_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>RingBuffer_Insert</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ring_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RingBuffer_Insert &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsFull
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_RXIntHandlerRB
</UL>

<P><STRONG><a name="[8e]"></a>RingBuffer_InsertMult</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ring_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RingBuffer_InsertMult &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsFull
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendRB
</UL>

<P><STRONG><a name="[8d]"></a>RingBuffer_Pop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ring_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RingBuffer_Pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsEmpty
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_TXIntHandlerRB
</UL>

<P><STRONG><a name="[8f]"></a>RingBuffer_PopMult</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ring_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RingBuffer_PopMult &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_IsEmpty
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_ReadRB
</UL>

<P><STRONG><a name="[96]"></a>Board_UARTPutChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Board_UARTPutChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f8]"></a>_sys_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fputc &rArr; Board_UARTPutChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>Board_UARTGetChar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[98]"></a>fgetc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTGetChar
</UL>

<P><STRONG><a name="[b8]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[41]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[99]"></a>Board_UARTPutSTR</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutChar
</UL>

<P><STRONG><a name="[9a]"></a>Board_Debug_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Board_Debug_Init &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[9e]"></a>Board_LED_Set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[9b]"></a>Board_LED_Test</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
</UL>

<P><STRONG><a name="[5d]"></a>Board_LED_Toggle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userApp
</UL>

<P><STRONG><a name="[67]"></a>Board_Init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Board_Init &rArr; Board_Debug_Init &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>Board_Buttons_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIRInput
</UL>

<P><STRONG><a name="[a1]"></a>Buttons_GetStatus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
</UL>

<P><STRONG><a name="[a2]"></a>Board_SetupMuxing</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, board_sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Board_SetupMuxing &rArr; Chip_IOCON_SetPinMuxing
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_SetPinMuxing
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>

<P><STRONG><a name="[a4]"></a>Board_SetupClocking</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board_sysinit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[42]"></a>Board_SystemInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Board_SystemInit &rArr; Board_SetupMuxing &rArr; Chip_IOCON_SetPinMuxing
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SetupMuxing
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
</UL>

<P><STRONG><a name="[f9]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
</UL>

<P><STRONG><a name="[fa]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPRS
</UL>

<P><STRONG><a name="[73]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_setEcho
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_setAPN
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPStart
</UL>

<P><STRONG><a name="[a7]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[a9]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[31]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[71]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkSendLimitSize
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_CheckRegStatus
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkSignal
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkAttach
</UL>

<P><STRONG><a name="[6f]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkSendLimitSize
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_CheckRegStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_getIPStatus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkSignal
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkAttach
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPStart
</UL>

<P><STRONG><a name="[58]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;authorization
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_PopMult
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
</UL>

<P><STRONG><a name="[fb]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[b2]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAndGet
</UL>

<P><STRONG><a name="[fc]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaudFDR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTOSCRate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a6]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[26]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b7]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[33]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[a5]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b1]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[ae]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b9]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ba]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[38]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[35]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[bb]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3d]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c0]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[29]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[68]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, swauthdemo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUART
</UL>

<P><STRONG><a name="[64]"></a>Chip_GPIO_SetPinState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, swauthdemo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGPRSCtlPinStatu
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[69]"></a>setupUART</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, swauthdemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setupUART &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>sendAndGet</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, air202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sendAndGet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_powerOff
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkSendLimitSize
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_CheckRegStatus
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPClose
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_getIPStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_ATInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_setEcho
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_setAPN
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkSignal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkPIN
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkIPAddress
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_checkAttach
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_activePDP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPStart
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPShut
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air202_IPSend
</UL>

<P><STRONG><a name="[81]"></a>Chip_FMC_SetFLASHAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysinit_112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[80]"></a>Chip_Clock_SetupSystemPLL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysinit_112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[85]"></a>Chip_Clock_EnablePeriphClock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart_112x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[93]"></a>RingBuffer_IsFull</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ring_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_InsertMult
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Insert
</UL>

<P><STRONG><a name="[95]"></a>RingBuffer_IsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_PopMult
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer_Pop
</UL>

<P><STRONG><a name="[9c]"></a>Chip_GPIO_GetPinState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_GetStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Test
</UL>

<P><STRONG><a name="[a0]"></a>Chip_GPIO_SetPinDIRInput</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Buttons_Init
</UL>

<P><STRONG><a name="[27]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[be]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b6]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[ab]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[aa]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[ac]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ad]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
